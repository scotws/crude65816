Manual for A Crude 65816 Emulator 
Scot W. Stevenson <scot.stevenson@gmail.com>
First version: 09. Jan 2015
This version: 04. Oct 2015


THIS DOCUMENT IS CURRENTLY MERELY A COLLECTION OF NOTES. WHEN IN DOUBT, USE THE SOURCE CODE. 



CALLING THE PROGRAM

By default, Gforth only reserves measly 256k for the dictionary, which is not enough when you are going to simulate a 16M large memory space. We need to call Gforth with something like

        gforth -m 1G

which should be way more than enough. You can also start the emulator directly  from the command line with

        gforth -m 1G crude65816.fs

Linux users will want to put this in a shell script. 



IMPORTING ROM FILES

The Crude Emulator has a very, ahem, crude memory model: It simply reserves 16 MByte of RAM as the complete memory range of the 65816. During boot, the emulator loads the contents of the files given in config.fs to the memory locations in the lines designated with loadrom. Note there is no write protection for ROM, the emulator will happily let you change these values. 

The current ROM file is a primitive 8-bit test program from the 6502 project. 



I/O ADDRESSES

Currently I/O chips are not emulated in any meaningful way. There are two locations, "putchr" and "getchr", defined in config.fs that will later allow output to the terminal. 



USING THE PROGRAM

In case you are new to Forth, a remember: it is not a programming language, but a system to create specialized languages. As such, with the Crude Emulator you have access to all Forth commands such as "dump", and in single-step mode can assign values to the register variables. 

The Crude Emulator current supports the following addition commands. Note that by Forth convention, a command that starts with a dot (".state") prints some information to the screen. 

        .direct         - print the Direct Page based on D register
        .stack          - print the 65816 stack if in emulated mode
        .state          - print the CPU state (register content, etc)
        bye             - end emulation (normal Forth command) 
        fetch8          - fetch a byte from 24-bit address on Forth stack
        fetch16         - fetch a double byte from 24-bit address on Forth stack
        fetch24         - fetch three bytes from 24-bit address on Forth stack
        emulate         - switch the CPU to emulated (8-bit) mode
        native          - switch the CPU to native (16-bit) mode
        reset-i         - Trigger the RESET interrupt 
        (FEHLT other interrupts)
        run             - run the emulator continuously
        step            - run one instruction in single-step mode

STEP is usually used in combination with .STATE ("step .state") to show the status of the emulator after every step. Because of the nature of Forth, any word defined in the emulator can be used from the command line. For example, to get a dump of a memory range, we can use a command such as 

        00e000 memory +  4 dump 

Which will show the first four bytes of the 65816's memory starting at bank 0, address e000. To force the machine to run at a certain address, just save it in the PC: 

        00e000 PC ! 

followed by a "run" or "step". The interrupt vectors can be accessed by hand this way, too: 

        reset-i

Note that currently most interrupt routines are not functional. 


OTHER USEFUL COMBINATIONS


To walk through the program 

step .state


To walk through the program, showing the stack with every step (emulation mode only)

step .state .stack


To monitor a memory address every step, we can use the FETCH instructions. To watch what happens to $000000, for instance: 

step .state  ." DP 00:"  0000 fetch16 . 




EXECUTING A SINGLE INSTRUCTION

(opc-<MN>)



NAMES OF MODES 

The Crude Emulator internally uses an assembler variant called "Typist's Assembler", see https://github.com/scotws/tasm65816 . Typist's Assembler works better for ten-finger typing and puts the operand in front of the opcode, making it easier to work with a prefix language such as Forth.

    MODE                      WDC SYNTAX       TYPIST'S SYNTAX

    implied                   dex                    dex
    accumulator               inc                    inc.a
    immediate                 lda #$00            00 lda.#
    absolute                  lda $1000         1000 lda
    absolute x indexed        lda $1000,x       1000 lda.x
    absolute y indexed        lda $1000,y       1000 lda.y
    absolute indirect         jmp ($1000)       1000 jmp.i
    indexed indirect          jmp ($1000,x)     1000 jmp.xi
    absolute long             jmp $101000     101000 jmp.l    (65816)
    absolute long x indexed   jmp $101000,x   101000 jmp.lx   (65816)
    absolute indirect long    jmp [$1000]       1000 jmp.il   (65816)
    direct page               lda $10             10 lda.d
    direct page x indexed     lda $10,x           10 lda.dx
    direct page y indexed     lda $10,y           10 lda.dy
    direct page indirect      lda ($10)           10 lda.di
    dp indirect x indexed     lda ($10,x)         10 lda.dxi
    dp indirect long          lda [$10]           10 lda.dil  (65816) 
    dp indirect y indexed     lda ($10),y         10 lda.diy  
    dp indirect long y index  lda [$10],y         10 lda.dily (65816)
    relative                  bne $2f00         2f00 bne
    relative long             brl $20f000     20f000 brl      (65816)
    stack relative            lda 3,S              3 lda.s    (65816)
    stack rel ind y indexed   lda (3,S),y          3 lda.siy  (65816)
    block move                mvp 0,0            0 0 mvp      (65816) 


NOTES ON INTERNAL CONSTRUCTION

The Crude Emulator keeps all values in variables. Experiments with first A as the top of the Forth stack (TOS) and then PC worked, but make working with it as a debugging tool more difficult: You either had to reload A or PC by hand after every crash. The Forth stack should be empty after every successful instruction.


OTHER NOTES

Though the documentation is unclear on this subject, tests have shown that you can relocate the Direct Page in Emulation Mode, 
see http://forum.6502.org/viewtopic.php?f=8&t=3459&p=40389#p40370

KNOWN ISSUES 

- Wrapping addresses is currenty not implemented. This will be corrected for the BETA version

- The Overflow Flag (v) is not correctly set in Decimal mode. See http://www.6502.org/tutorials/vflag.html and http://www.righto.com/2012/12/the-6502-overflow-flag-explained.html for details.



END
